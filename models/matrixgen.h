//HERE BE DRAGONS

#define matgen_master_deg (R,P,A,X,Y,Z) (X*cos(radians(mod(A,360)))*cos(radians(mod(P,360))),Y*sin(radians(mod(A,360)))*cos(radians(mod(P,360))),Z*cos(radians(mod(A,360)))*-1*sin(radians(mod(A,360))),0, X*(-1*sin(radians(mod(A,360)))*cos(radians(mod(R,360)))+cos(radians(mod(A,360)))*sin(radians(mod(P,360)))*sin(radians(mod(R,360)))),Y*(cos(radians(mod(A,360)))*cos(radians(mod(R,360)))+sin(radians(mod(A,360)))*sin(radians(mod(P,360)))*sin(radians(mod(R,360)))),Z*(sin(radians(mod(A,360)))*sin(radians(mod(P,360)))*cos(radians(mod(R,360)))+cos(radians(mod(P,360)))*sin(radians(mod(R,360)))),0, X*(sin(radians(mod(A,360)))*sin(radians(mod(R,360)))+cos(radians(mod(A,360)))*sin(radians(mod(P,360)))*cos(radians(mod(R,360)))),Y*(cos(radians(mod(A,360)))*-1*sin(radians(mod(R,360)))+sin(radians(mod(A,360)))*sin(radians(mod(P,360)))*sin(radians(mod(R,360)))),Z*(sin(radians(mod(A,360)))*sin(radians(mod(P,360)))*-1*sin(radians(mod(R,360)))+cos(radians(mod(P,360)))*cos(radians(mod(R,360)))),0, 0,0,0,1)
#define matgen_master_rad (R,P,A,X,Y,Z) (X*cos(mod(A,2*M_PI))*cos(mod(P,2*M_PI)),Y*sin(mod(A,2*M_PI))*cos(mod(P,2*M_PI)),Z*cos(mod(A,2*M_PI))*-1*sin(mod(A,2*M_PI)),0, X*(-1*sin(mod(A,2*M_PI))*cos(mod(R,2*M_PI))+cos(mod(A,2*M_PI))*sin(mod(P,2*M_PI))*sin(mod(R,2*M_PI))),Y*(cos(mod(A,2*M_PI))*cos(mod(R,2*M_PI))+sin(mod(A,2*M_PI))*sin(mod(P,2*M_PI))*sin(mod(R,2*M_PI))),Z*(sin(mod(A,2*M_PI))*sin(mod(P,2*M_PI))*cos(mod(R,2*M_PI))+cos(mod(P,2*M_PI))*sin(mod(R,2*M_PI))),0, X*(sin(mod(A,2*M_PI))*sin(mod(R,2*M_PI))+cos(mod(A,2*M_PI))*sin(mod(P,2*M_PI))*cos(mod(R,2*M_PI))),Y*(cos(mod(A,M_PI))*-1*sin(mod(R,M_PI))+sin(mod(A,M_PI))*sin(mod(P,2*M_PI))*sin(mod(R,2*M_PI))),Z*(sin(mod(A,2*M_PI))*sin(mod(P,2*M_PI))*-1*sin(mod(R,2*M_PI))+cos(mod(P,2*M_PI))*cos(mod(R,2*M_PI))),0, 0,0,0,1)
#define matgen_x_deg (X,D) (D,0,0,0, 0,D*cos(radians(mod(X,360))),D*sin(radians(mod(X,360))),0, 0,D*-1*sin(radians(mod(X,360))),D*cos(radians(mod(X,360))),0, 0,0,0,1)
#define matgen_x_rad (X,D) (D,0,0,0, 0,D*cos(mod(X,2*M_PI)),D*sin(mod(X,2*M_PI)),0, 0,D*-1*sin(mod(X,2*M_PI)),D*cos(mod(X,2*M_PI)),0, 0,0,0,1)
#define matgen_y_deg (Y,D) (D*cos(radians(mod(Y,360))),0,D*-1*sin(radians(mod(Y,360))),0, 0,D,0,0, D*sin(radians(mod(Y,360))),0,D*cos(radians(mod(Y,360))),0, 0,0,0,1)
#define matgen_y_rad (Y,D) (D*cos(mod(Y,2*M_PI)),0,D*-1*sin(mod(Y,2*M_PI)),0, 0,D,0,0, D*sin(mod(Y,2*M_PI)),0,D*cos(mod(Y,2*M_PI)),0, 0,0,0,1)
#define matgen_z_deg (Z,D) (D*cos(radians(mod(Z,360))),D*sin(radians(mod(Z,360))),0,0, D*-1*sin(radians(mod(Z,360))),D*cos(radians(mod(Z,360))),0,0, 0,0,D,0, 0,0,0,1)
#define matgen_z_rad (Z,D) (D*cos(mod(Z,2*M_PI)),D*sin(mod(Z,2*M_PI)),0,0, D*-1*sin(mod(Z,2*M_PI)),D*cos(mod(Z,2*M_PI)),0,0, 0,0,D,0, 0,0,0,1)
//use the deg macros to minimize rounding errors
#define matgen_scale (X,Y,Z) (X,0,0,0, 0,Y,0,0, 0,0,Z,0, 0,0,0,1)
#define matgen_translate (X,Y,Z) (1,0,0,0, 0,1,0,0, 0,0,1,0, X,Y,Z,1)
#define matgen_identity (1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1)
