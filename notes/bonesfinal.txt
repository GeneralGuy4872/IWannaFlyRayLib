variables:

x = previous JOINT's axis X
y = previous JOINT's axis Y
z = previous JOINT's axis Z

X = rotation about x or the axis it implys
Y = rotation about y or the axis it implys
Z = rotation about z or the axis it implys

φ = roll angle

ℓ = length
r = radius
w = width
h = height

parameters:

->  = changes
... = may be ommitted if 0

index is a direction in the form:
±axis ± angle
Z rotates in x∧y
Y rotates in x∧z
X rotates in y∧z

lim_ are unsigned angles
angle is a (usually signed explicitly) quantity in rads, degs, gonds, or turns


bone,line:
   ℓ
-> φ (index, lim+, lim-, angle)
...X (index, angle)
...Y (index, angle)
...Z (index, angle)
-> X (index, lim+, lim-, angle)
-> Y (index, lim+, lim-, angle)
-> Z (index, lim+, lim-, angle)

bone,sphere:
   r
-> X (index, lim+, lim-, angle)
-> Y (index, lim+, lim-, angle)
-> Z (index, lim+, lim-, angle)

bone,bicone:
   r
   ℓ
...X (index, angle)
...Y (index, angle)
...Z (index, angle)
-> X (index, lim+, lim-, angle)
-> Y (index, lim+, lim-, angle)
-> Z (index, lim+, lim-, angle)

bone,<foo>pyramid:
   ℓ
   r
-> φ (index, lim+, lim-, angle)
...X (index, angle)
...Y (index, angle)
...Z (index, angle)
-> X (index, lim+, lim-, angle)
-> Y (index, lim+, lim-, angle)
-> Z (index, lim+, lim-, angle)

bone,octohedron:
   r
-> φ (index, lim+, lim-, angle)
...X (index, angle)
...Y (index, angle)
...Z (index, angle)
-> X (index, lim+, lim-, angle)
-> Y (index, lim+, lim-, angle)
-> Z (index, lim+, lim-, angle)

bone,tetrahedron:
   ℓ
   h
   w
-> φ (index, lim+, lim-, angle)
...X (index, angle)
...Y (index, angle)
...Z (index, angle)
-> X (index, lim+, lim-, angle)
-> Y (index, lim+, lim-, angle)
-> Z (index, lim+, lim-, angle)

bone,triangle:
   h
   w
-> φ (index, lim+, lim-, angle)
...X (index, angle)
...Y (index, angle)
...Z (index, angle)
-> X (index, lim+, lim-, angle)
-> Y (index, lim+, lim-, angle)
-> Z (index, lim+, lim-, angle)

common:
1 neck, 5 lines : 1(5)
1 back, 10 lines : 1(10)
2 shoulders, 2 lines : 2(1)
2 arms, 4 lines : 2(2)
1 skull, 1 sphere : 1(s)

---

human:
color grey

1 pelvis, 1 triangle : 1(t)

2 legs, 4 lines : 2(2)
2 ankles, 8 lines : 2(4)
10 metatarsels, 10 lines : 2(5(1))
10 toes, 28 lines : 2(1(2)+4(3))

2 wrists, 6 lines : 2(3)
10 fingers, 30 lines : 2(5(3))
8 metacarples, 8 lines : 2(4(1))


avid:
color green

1 pelvis, 1 tetrahedron : 1(t)

+2 shoulders, 2 lines : n + 2(1)
2 wings, 6 lines : 2(3)
2 alula, 4 lines : 2(2)
18 primaries : 18(1)

2 legs, 6 lines : 2(3)
2 ankles, 2 invhalfpyramids : 2(h')
8 toes, 16 lines : 8(2)

2 wrists, 4 lines : 2(2)
6 metacarples, 6 lines : 2(3(1))
8 fingers, 30 lines : 2(4(3))

9 tailfeathers, 9 lines : 9(1)


feline:
color orange

1 pelvis, 1 tetrahedron : 1(t)

2 legs, 6 lines : 2(3)
2 ankles, 6 lines : 2(3)
8 toes, 16 lines : 2(4(2))

2 wrists, 6 lines : 2(3)
8 metacarples, 8 lines : 2(4(1))
10 fingers, 20 lines : 2(5(2))

1 tail, 10 lines : 1(10)
2 ears, 2 halfpyramids : 2(h)


merfolk:
color blue

1 pelvis, 1 octohedron : 1(o)

2 wrists, 6 lines : 2(3)
10 fingers, 30 lines : 2(5(3))
8 metacarples, 8 lines : 2(4(1))

2 sidefins, 2 lines : 2(1)
1 tail, 10 lines : 1(10)
5 tailfinrays, 5 lines : 5(1)

draconic:
color red

1 pelvis, 1 tetrahedron : 1(t)

+2 shoulders, 2 lines : n + 2(1)
2 wings, 4 lines : 2(2)
10 batfingers, 36 lines : 2(1(2)+4(4))

2 legs, 6 lines : 2(3)
8 toes, 22 lines : 2(2+3(3))

2 wrists, 4 lines : 2(2)
6 metacarples, 6 lines : 2(3(1))
8 fingers, 30 lines : 2(4(3))

1 tail, 10 lines : 1(10)
2 horns, 2 pyramids : 2(p)

insectoid:
color yellow

1 pelvis, 1 octohedron : 1(o)

+6 shoulders, 6 lines : n + 2(3(1))
4 wings, 4 lines : 2(2(1))

+2 arms, 4 lines : n + 2(2)
2 wrists, 2 invpyramids : 2(p')
8 fingers, 24 lines : 2(4(3))

2 legs, 4 lines : 2(2)
2 ankels, 2 invisopyramids : 2(p'')
8 toes, 24 lines : 2(4(3))

1 stinger, 1 bicone : 1(b)
2 antenna, 6 lines : 2(3)

---

Axis (Left-handed):

North : +x
South : -x
East : +y
West : -y
Skyward : +z
Deeper : -z

Forward : +X
Backward : -X
Left : -Y
Right : +Y
Up : +Z
Down : -Z

Yaw : ψ
Pitch : θ
Roll : φ
Convention : ψ,θ,φ

Camera Azimuth : A from +X in X∧Y
Camera Elevation : a from X∧Y in A∧Z
Camera Polar : ϕ from Z in A∧Z
Camera Range : r from skull
Camera FOV : f
Camera Direction : -P

modelpos = offset for model origen
eyes = offset for camera origen

use glLoadMatrix for stuff
