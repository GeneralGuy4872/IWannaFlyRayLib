typedef void* mapgendispatchtyp[256][256][512][2];
typedef struct roomneighbors mapgeneighborstyp[256][256][512];

typedef void (*mapgencall)(struct latlontyp,struct roomneighbors);
typedef void (*mapgenconstructor)(mapgendispatchtyp,mapgeneighbortyp);

mapgentoplevel (latlon)
struct latlontyp latlon;
{
struct planetyp plane = getplanetyp(latlon);
if (PLANESTACK::planep(plane)) {
	PLANESTACK::inc(plane);
	}
else if (planep(plane)) {
	PLANESTACK::push(plane);
	}
else {
	return ERR;
	}

char symbol[15] = sprintf("r%02u_az%03u_el%02u",latlon.shift,latlon.el,((latlon.el < 0) ? latlon.el : (abs(latlon.el) + 1)) )
void* handle = dlopen(LIB_GAMES_PATH GAME_NAME_PATH "/mapgen.so",RTLD_NOW);
mapgendispatchtyp mapgendispatch;
mapgeneighborstyp mapgeneighbors;
mapgenconstructor constructor = dlsym(handle,symbol);
*constructor(mapgendispatch,mapgeneighbors);

if ((mapgendispatch[latlon.dep][latlon.lat][latlon.lon][0] == NULL)
|| ( *((char*) mapgendispatch[latlon.dep][latlon.lat][latlon.lon][0] )[0] == '\0')
  ) {
	if ((mapgendispatch[latlon.dep][latlon.lat][latlon.lon][1] == NULL)
	|| ( *((char*) mapgendispatch[latlon.dep][latlon.lat][latlon.lon][1] )[0] == '\0')
	  ) {
		deathcall(SHARE_LIB_GAMES_PATH "death/icarus.ans");
		}
	else {
		/*call perl against file*/;
		}
	}
else {
	if ((mapgendispatch[latlon.dep][latlon.lat][latlon.lon][1] == NULL)
	|| ( *((char*) mapgendispatch[latlon.dep][latlon.lat][latlon.lon][1] )[0] == '\0')
	  ) {
		return deathcall(mapgendispatch[latlon.dep][latlon.lat][latlon.lon][0]) );
		}
	else {
		void* handle2 = dlopen(mapgendispatch[latlon.dep][latlon.lat][latlon.lon][0],RTLD_NOW);
		roomgencall tmp = dlsym(handle2,mapgendispatch[latlon.dep][latlon.lat][latlon.lon][1]);
		return *tmp(latlon,mapgeneighbors[latlon.dep][latlon.lat][latlon.lon]);
		dlclose(handle2);
		}
	}
dlclose(handle);
PLANESTACK::dec(plane);
END
