/**************
 * IWANNAFLY  *
 *            *
 *  prealpha  *
 **************/

/* part of this program has been created using the toutorials at
 * http://irrlicht.sourceforge.net/docu/pages.html
 */

/* this program currently requires a second terminal; this may be anything
 * that can be passed to the program as argv[1] and fopened "r+". stderr
 * should also be redirected to the same file. invocation might be:
 *
 * Iwannafly /dev/pts/1 savefile 2>~/logfile
 *
 * eventually, all three relevant windows will be generated by the program
 * itself, allowing it to be launched without an stdio.
 */

#define SYSINT int
#define RGBColor(R,G,B) irr::video::SColor(0xFF,R,G,B)
#define RGBAColor(R,G,B,A) irr::video::SColor(A,R,G,B)


#include <cstdio>
#include <cstdint>
#include <cmath>
#include <cerrno>

#include <map>
#include <string>

#include <irrlicht/irrlicht.h>
//#include <lua5.3/lua.hpp>

extern "C" {
	#include <pthread.h>
	#include <curses.h>
	}

namespace iwf { namespace datatypes {
class camcoord {
	public:
	double az;
	double el;

	irr::core::vector3df euclid () {
		irr::core::vector3df tmp;
		tmp.X = sin(this->el) * cos(this->az);
		tmp.Y = sin(this->el) * sin(this->az);
		tmp.Z = cos(this->el);
		return tmp;
	}};
}}
                  
namespace irrcontext {
	irr::IrrlichtDevice * device;
	irr::video::IVideoDriver * driver;
	irr::scene::ISceneManager * smgr;
	irr::gui::IGUIEnvironment * guienv;
	irr::scene::IMeshManipulator * meshmanipr;
	irr::gui::ICursorControl * cursctrl;
	irr::ITimer * timer;
	double deltatime;
	uint32_t then;
	uint32_t now;
	}

//lua_State * LSTATE;
std::map<std::string,pthread_t *> THREADS;
iwf::datatypes::camcoord CAMCOORD;
irr::scene::ICameraSceneNode * CAMERA;

class MyEventReciever : public irr::IEventReceiver {
	public:
    	virtual bool OnEvent (const irr::SEvent& event) {
        	if (event.EventType == irr::EET_KEY_INPUT_EVENT) {
			KeyIsDown[event.KeyInput.Key] = event.KeyInput.PressedDown;
			return false;
		}}

	virtual bool IsKeyDown(irr::EKEY_CODE keyCode) {
		return KeyIsDown[keyCode];
		}

	SYSINT MyEventReceiver() {
		for (int i = 0;i < irr::KEY_KEY_CODES_COUNT;i++) {
			KeyIsDown[i] = false;
		}}

	private:
	bool KeyIsDown[irr::KEY_KEY_CODES_COUNT];
	};

MyEventReciever RECIEVER;

SYSINT initialize (char * argv0,char * argv1) {
	for (int fg = 0;fg < 8;fg++) {
		for (int bg = 0;bg < 8;bg++) {
			init_pair(fg | (bg << 3),fg,bg);
		}}

	FILE * dev = fopen(argv1,"r+");

	if (dev == NULL) {
		fprintf(stderr,"%s\n(Not a typewriter?)\n",strerror(errno));
		printf("usage: %s <tty> ...\n",argv0);
		exit(1);
		}

	newterm(NULL,dev,dev);
	raw();
	noecho();
	keypad(NULL,1);

	irrcontext::device = irr::createDevice(irr::video::EDT_OPENGL,irr::core::dimension2d<irr::u32>(640, 480),16,false,false,false,&RECIEVER);
	irrcontext::driver = irrcontext::device->getVideoDriver();
	irrcontext::smgr = irrcontext::device->getSceneManager();
	irrcontext::guienv = irrcontext::device->getGUIEnvironment();
	irrcontext::meshmanipr = irrcontext::smgr->getMeshManipulator();
	irrcontext::cursctrl = irrcontext::device->getCursorControl();
	irrcontext::timer = irrcontext::device->getTimer();

	irrcontext::guienv->addStaticText(L"IWannaFly Devtest prealpha version 0.0.9001",irr::core::rect<irr::s32>(10,10,260,22),1);
	CAMERA = irrcontext::smgr->addCameraSceneNode(NULL,irr::core::vector3df(0,0,0),irr::core::vector3df(1,1,1));
	CAMERA->setUpVector(irr::core::vector3df(0,0,1));
	irrcontext::cursctrl->setVisible(false);

	for (int x = 0;x < 2;x += 1) {
		for (int y = 0;y < 2;y += 1) {
			for (int z = 0;z < 2;z += 1) {
			irr::scene::IMeshSceneNode * tmp = irrcontext::smgr->addCubeSceneNode(
				10.0,
				NULL,
				((z << 2)|(y << 1)|x),
				irr::core::vector3df(
					(x ? 25 : -25),
					(y ? 25 : -25),
					(z ? 25 : -25)));
			irrcontext::meshmanipr->setVertexColors(tmp->getMesh(),RGBColor(
				((0xFF * x) | 0x55),
				((0xFF * y) | 0x55),
				((0xFF * z) | 0x55)));
	}}}
	irrcontext::smgr->addLightSceneNode();
	}

//void * repl (void * dummy) {
//	LSTATE = luaL_newstate();
//	lua_close(LSTATE);
//	return 0;
//	}

main (int argc, char *argv[]) {
	if (argc < 2) {
		printf("usage: %s <tty> ...\n",argv[0]);
		exit(1);
		}
	initialize(argv[0],argv[1]);
	while (irrcontext::device->run()) {
		if (RECIEVER.IsKeyDown(irr::KEY_KEY_W)) {
			CAMCOORD.el += 5 * irrcontext::deltatime;
				if (CAMCOORD.el >= 0.0) {
					CAMCOORD.el = 0 - (M_PI / 1000);
				}}
		if (RECIEVER.IsKeyDown(irr::KEY_KEY_S)) {
			CAMCOORD.el -= 5 * irrcontext::deltatime;
				if (CAMCOORD.el <= -M_PI) {
					CAMCOORD.el = -(M_PI - (M_PI / 1000));
				}}
		if (RECIEVER.IsKeyDown(irr::KEY_KEY_A)) {
			CAMCOORD.az -= 5 * irrcontext::deltatime;
				while (CAMCOORD.az < -M_PI) {
					CAMCOORD.az += 2 * M_PI;
				}}
		if (RECIEVER.IsKeyDown(irr::KEY_KEY_D)) {
			CAMCOORD.az += 5 * irrcontext::deltatime;
				while (CAMCOORD.az > M_PI) {
					CAMCOORD.az -= 2 * M_PI;
				}}

		CAMERA->setTarget(CAMCOORD.euclid());
		irrcontext::driver->beginScene(true, true, RGBAColor(0,0,0xAA,0xF0));
		irrcontext::smgr->drawAll();
		irrcontext::guienv->drawAll();
		irrcontext::driver->endScene();

		irrcontext::now = irrcontext::timer->getTime();
		irrcontext::deltatime = (irrcontext::now - irrcontext::then) / 1000.0;
		irrcontext::then = irrcontext::now;
	}}
