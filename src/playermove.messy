#define 

playertyp__movecheck (playertyp * this,roomstackobj * roomstack,tileset * maintiles,char x,char y,char z,char newmovetok) {
	roomtyp * here = roomstack->swapin;
	roomtyp * there;
	int xx,yy,zz;
	/**********/
	if (newmovetok & MOVETOKEN_LAND) {
		this->etc.movetoken = 0;
		}
	else {
		if (newmovetok & MOVETOKEN_FLY) {
			this->etc.movetoken |= MOVETOKEN_FLY;
			}
		if (newmovetok & MOVETOKEN_SWIM) {
			this->etc.movetoken |= MOVETOKEN_SWIM;
			}
		}
	/**********/
	if (
	 (this->etc.movetoken == 3)
	  &&
	 !(roomtileget(here,maintiles,this->pos)->liquid)
		) {
		this->etc.movetoken = MOVETOKEN_FLY;
		}
	/**********/
	if (this->etc.movetoken & MOVETOKEN_SWIM) {
		if (!(this->paffect.skill.swim || this->effect.skill.swim) {
			x = 0;
			y = 0;
			z = 0;
			this->etc.movetoken = 0;
			}
		}
	else if (this->etc.movetoken & MOVETOKEN_FLY) {
		switch umax(this->paffect.skill.fly , this->effect.skill.fly) :
			case 0 : x = 0; y = 0; z = 0; this->etc.movetoken = 0; break;
			case 1 : z = -1; break;
			case 2 : if (z > 0) {z = 0} break;
			default : break;
		}
	/**********/
	tilemeta * thistile = roomtileget(here,maintiles,this->pos);
	/**(**/
	if (!(this->etc.movetoken)) {		
		for (int n = 1;this->pos[2] > 0;n++) {
			tilemeta * tmptile = roomgetilei(here,maintiles,this->pos[0],this->pos[1],this->pos[2] - 1)
			if (!(tmptile->solid || tmptile->liquid)) {
				this->pos[2] -= 1;
				if (tmptile->liquid && !(tmptile->solid)) {
					this->etc.movetoken = MOVETOKEN_SWIM;
					}
				}
			else {
				goto(ground);
				}
			}
		}
	ground:
	/**)**/
	xx = this->pos[0] + x;
	yy = this->pos[1] + y;
	zz = this->pos[2] + z;
	/**(**/
	if (
	 !(this->etc.movetoken)
	  &&
	 (xx ≥ 0) && (xx < MAX_X)
	  &&
	 (yy ≥ 0) && (yy < MAX_Y)
		) {		
		for (;zz > 0;zz--) {
			tilemeta * tmptile = roomgetilei(here,maintiles,xx,yy,zz);
			if (!(tmptile->solid || tmptile->liquid) {
				zz--;
				if (tmptile->liquid && !(tmptile->solid)) {
					this->etc.movetoken = MOVETOKEN_SWIM;
					}
				}
			else {
				goto(ground2);
				}
			}
		}
	ground2:
	if (!(zz || roomgetilei(roomstack->neighbors[ROOM_DOWN],maintiles,xx,yy,roomstack->roomneighbors[ROOM_DOWN]->ceiling)->solid)) {
		zz--;
		if (roomgetilei(roomstack->neighbors[ROOM_DOWN],maintiles,xx,yy,roomstack->roomneighbors[ROOM_DOWN]->ceiling)->liquid) {
		}
	/**)**/
	uchar whereto;
	{
		char key = 0;
		if (xx ≥ MAX_X) {key |= 1}
		else if (xx < 0) {key |= 2}
		if (yy ≥ MAX_Y) {key |= 4}
		else if (yy < 0) {key |= 8}
		if (zz ≥ MAX_Z) {key |= 0x90}
		else if (zz > here->ceiling) {key |= 0x10}
		else if (zz < 0) {key |= 0x20}
		switch key :
			case 0 : there = here; break;
			case 0x11 :
			case 1 : whereto = ROOM_EAST;
				there = roomstack->neighbors[whereto];
				if (zz ≤ there->ceiling) {
					xx = 0;
					break;
					}
				else {
					UTIL_BEEP; return OK;
					}
			case 0x12 :
			case 2 : whereto = ROOM_WEST;
				there = roomstack->neighbors[whereto];
				if (zz ≤ there->ceiling) {
					xx = MAX_X - 1;
					break;
					}
				else {
					UTIL_BEEP; return OK;
					}
			case 0x14 :
			case 4 : whereto = ROOM_SOUTH;
				there = roomstack->neighbors[whereto];
				if (zz ≤ there->ceiling) {
					yy = 0;
					break;
					}
				else {
					UTIL_BEEP; return OK;
					}
			case 0x18 :
			case 8 : whereto = ROOM_NORTH;
				there = roomstack->neighbors[whereto];
				if (zz ≤ there->ceiling) {
					yy = MAX_Y - 1;
					break;
					}
				else {
					UTIL_BEEP;
					return OK;
					}
			case 0x90 :
			case 0x10 : whereto = ROOM_UP;
				there = roomstack->neighbors[whereto];
				zz = 0;
				break;
			case 0x20 : whereto = ROOM_DOWN;
				there = roomstack->neighbors[whereto];
				zz = there->ceiling;
				break;
			default : UTIL_BEEP; return OK;
		}
	tilemeta * nextile = roomtilegeti(there,maintiles,xx,yy,zz);
	/**********/
	bool nextilefloor;
	{
		if (zz > 0) {
			tilemeta * undernextile = roomtilegeti(there,maintiles,xx,yy,zz - 1);
			if (undernextile->solid) {
				nextilefloor = 1;
				}
			else {
				if ((zz - 1) > 0) {
					tilemeta * undernextile = roomtilegeti(there,maintiles,xx,yy,zz - 2);
					nextilefloor = undernextile->solid;
					}
				else if (here == there) {
					tilemeta * undernextile = roomtilegeti(roomstack->neighbors[ROOM_DOWN],maintiles,xx,yy,roomstack->neighbors[ROOM_DOWN]->ceiling - 1);
					nextilefloor = undernextile->solid;
					}
			}
		else if (here == there) {
			tilemeta * undernextile = roomtilegeti(roomstack->neighbors[ROOM_DOWN],maintiles,xx,yy,roomstack->neighbors[ROOM_DOWN]->ceiling);
			if (undernextile->solid) {
				nextilefloor = 1;
				}
			else {
				zz--;
				tilemeta * undernextile = roomtilegeti(roomstack->neighbors[ROOM_DOWN],maintiles,xx,yy,roomstack->neighbors[ROOM_DOWN]->ceiling - 1);
				nextilefloor = undernextile->solid;
			}
		else {
			nextilefloor = 1;
			}
		}
	/**********/
	switch this->etc.movetoken :
		/*****/
		case 0 :
			if (nextilefloor) {
				
		/*****/
		case MOVETOKEN_SWIM :
			if (nextile->solid || maskfetch(zz,yy,xx,there->collimap) {
				UTIL_BEEP;
				this->etc.movetoken = 0;
				}
			else if (!(thistile->liquid)) {
				this->pos[0] = xx;
				this->pos[1] = yy;
				this->pos[2] = max(zz,0);
				}
			else {
				this->pos[0] = xx;
				this->pos[1] = yy;
				this->pos[2] = zz;
				}
			if (this != that) {
				roomstackobj__neighbor_pullset(whereto);
				}
			return OK;
			}
		/*****/
		case MOVETOKEN_FLY :
			if (nextile->solid || maskfetch(zz,yy,xx,there->collimap) {
				UTIL_BEEP;
				this->etc.movetoken = 0;
				}
			else if (nextile->liquid) {
				this->etc.movetoken |= MOVETOKEN_SWIM;
				this->pos[0] = xx;
				this->pos[1] = yy;
				this->pos[2] = zz;
				}
			else {
				this->pos[0] = xx;
				this->pos[1] = yy;
				this->pos[2] = zz;
				}
			if (this != that) {
				roomstackobj__neighbor_pullset(whereto);
				}
			return OK;
			}
		/*****/
		case 3 :
			if (nextile->solid || maskfetch(zz,yy,xx,there->collimap) {
				UTIL_BEEP;
				this->etc.movetoken = MOVETOKEN_SWIM;
				return OK;
				}
			else if (!(nextile->liquid || nextile->solid)) {
				this->etc.movetoken = MOVETOKEN_FLY;
				this->pos[0] = xx;
				this->pos[1] = yy;
				this->pos[2] = zz;
				}
			else {
				this->pos[0] = xx;
				this->pos[1] = yy;
				this->pos[2] = zz;
				}
			if (this != that) {
				roomstackobj__neighbor_pullset(whereto);
				}
			return OK;
			}
		/*****/
		default :
			raise(SIGBUS);
	/**********/
	invalidwarp:
		
	}
#define playermovecheck(X,Y,Z,W) playertyp__movecheck(PLAYER,ROOM,MAINTILES,X,Y,Z,W)
