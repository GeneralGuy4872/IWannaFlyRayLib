template <typename T>
class iwf::tmp_directory {
	private:
	T counter;
	public:
	std::map<T;std::pair<int,std::vector<unsigned char>>> data;

	T alloc () {
		while (this->data.contains(counter)) {
			counter++;
			}
		this->data[counter];
		T output = counter;
		while (this->data.contains(counter)) {
			counter++;
		}}

	std::vector<unsigned char> operator[](T n) {
		return this->data[n].second;
		}

	std::vector<unsigned char> at (T n) {
		return this->data.at(n).second;
		}

	int increment (T n) {
		this->data.at(n).first++;
		if (this->data.at(n).first < 0) {
			throw std::overflow_error;
			return -1;
			}
		return this->data.at(n).first;
		}

	int decrement (T n) {
		this->data.at(n).first--;
		if (this->data.at(n).first < 0) {
			this->data.erase(n);
			return -1;
			}
		return this->data.at(n).first;
		}
	};
