struct iwf::flywheel::subframe {
	std::stack<iwf::flywheel::subframe> down;
	std::string call;
	int times;
	}

struct iwf::flywheel::frame {
	iwf::flywheel::frame * next;
	std::stack<iwf::flywheel::subframe> down;
	std::string call;
	int times;
	}

class iwf::flywheel {
	iwf::flywheel::frame * data;
	iwf::flywheel::frame * prev;
	asIScriptEngine * engine;
	asIScriptContext * ctx;
	IMPLICIT call () {
		if (data != NULL) {
			ExecuteString(this->engine,data->call.c_str(),0,this->ctx);
			return 0;
		} else {
			return -1;
		}}

	IMPLICIT insert (std::string call,int times) {
		iwf::flywheel::frame * nova = new iwf::flywheel::frame;
		if (this->data == NULL) {
			this->data = nova;
			this->prev = nova;
			}
		nova->call = call;
		nova->times = times;
		return 0;
		}

	IMPLICIT queue (std::string call,int times) {
		iwf::flywheel::subframe * nova = new iwf::flywheel::frame;
		nova->call = call;
		nova->times = times;
		this->data->down.push(nova);
		return 0;
		}

	IMPLICIT dequeue () {
		iwf::flywheel::frame * nova = new iwf::flywheel::frame;
		nova->call = this->data->down.top().call;
		nova->times = this->data->down.top().times;
		nova->down = this->data->down.top().down;
		this->data->down.pop();
		return 0;
		}

	IMPLICIT spin () {
		if (this->data != NULL) {
			while (this->data->down.size()) {
				this->dequeue();
				}
			if (this->data->times == 0) {
				iwf::flywheel::frame * deadbeef = this->data;
				this->data = this->data->next;
				this->prev->next = this->data;
				delete deadbeef;
			} else {
				if (this->data->times != -1) {
					this->times -= 1;
					}
				this->prev = this->data;
				this->data = this->data->next;
				}
			return 0;	
			}}
	}
