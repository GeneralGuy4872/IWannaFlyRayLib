/*****************************
 * free flow idea scratchpad
 *****************************/

//new file family
class iwf::render3d::chunk_automesh {
	public:
		std::shared_mutex lock;
		std::map<uint16_t,irr::scene::IMeshBuffer> parts;
		irr::scene::SMesh whole;
		

iwf::render3d::chunk_automesh.append(x,y,z,id)
iwf::render3d::chunk_automesh.remove(x,y,z,id)

//new file family
class iwf::voxel::chunk {
	public:
		std::map<snybblevector4,uint16_t> data;

//new file family
class iwf::WORLD {
	std::map<irr::core::vector3d<int8_t>,iwf::render3d::chunk_automesh> vischunks;
	std::map<irr::core::vector3d<int8_t>,iwf::voxel::chunk> voxchunk;

//at mainloop	
for (iwf::render3d::chunkbuffer::batches::iterator i = some_buffer_foo.batches.begin();
	i != some_buffer_foo.batches.end();i++) {
	VIEWPORT->driver.drawmeshbuffer(*i);
	}

/*
;chunk loader (pseudocode):
...>
(defvar ¶ chunk«[(8 * 8) ]» chunkcache)

<chunkcache>
(deffun update)
<update>

(if («new_chunk_in_3cubed_cube» ¶
	(chunkcache::«add» «aforementioned»)
	(while ¶ chunkcache::«overflowing» ¶ chunkcache::popback))
;else
	 ∅)

</update>
</chunkcache>
*/

/* superheader
*/

/*
NEWSTRUCT iwf__render3d__ccamerastats {
	double position[3];
	float facing[3];
	float fov;
	_Bool firstperson;
	float azimuth;
	float elevation;
	float range;	
	float cutoff;
	}


struct iwf::render3d::camerastats {
	irr::core::vector3d<double> position;
	irr::core::vector3d<double> orient;
	irr::core::vector3d<float> facing;
	float	fov_x;
	double ratio;
	float dcutoff;
	bool firstperson;
	spherecoord3f orbit;
	}

struct iwf::render3d::cameraobj {
	irr::scene::ICameraSceneNode internal;
	float fov_x;
	double ratio;
	float dcutoff;
	bool firstperson;
	spherecoord3f orbit;
	}
	

iwf::render3d::camerastats iwf::render3d::cameraobj::fetch() {
	iwf::render3d::camerastats output;
	CAMERA__MUTEX.lock()
	output.position = CAMERA.position
