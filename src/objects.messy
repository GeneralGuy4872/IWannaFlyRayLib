/* roomstackele* roomstackobj__push(roomstackobj*,roomtyp*)	...add a room to the roomstack; NULL on error
 * roomstackele* roomstackobj__pushover(roomstackobj*,roomtyp*)	...add a room to the roomstack; NULL on error. no length checking.
 * roomtyp * roomstackobj__shift(roomstackobj*)	...drop the most stale node. pointer must be immediately used or a memory leak occurs
 * roomtyp * roomstackobj__drop(roomstackobj*,roomstackele*)	...drop a node from the roomstack. pointer must be immediately used or a memory leak occurs
 * void roomstackobj__shift_free(roomstackobj*)	...drop and free the most stale node from the stack
 * void roomstackobj__drop_free(roomstackobj,roomstackele*)	...drop and free the most stale node from the stack
 * void roomstackobj__trim(roomstackobj*)	...drop and free the most stale nodes until the size of the stack is acceptable
 * roomstackele* roomstackobj__nth(roomstackobj*,int)	...get the nth element; NULL on sentry
 * roomstackele* roomstackobj__roomp(roomstackobj*,latlontyp)	...if an element exists, return it; else NULL
 * implicit roomstackobj__roompull(roomstackobj*,latlontyp)	...if an element exists, move it to the front. OK or ERR
 * implicit roomstackobj__roomset(roomstackobj*,latlontyp)	...if an element exists, move it to swapin. OK or ERR
 * implicit roomstackobj__pull(roomstackobj*,roomstackele*)	...move the element to the front. OK or ERR
 * implicit roomstackobj__set(roomstackobj*,roomstackele*)	...move the element to swapin. OK or ERR
 * implicit roomstackobj__setswap(roomstackobj*,roomtyp*)	...create a room and push it to a swap slot, setting swapin.
 * roomtyp * roomstackobj__getswap(roomstackobj*,planetyp)	...get the room in a given swap slot.
 * roomtyp * roomstackobj__resetswap(roomstackobj*,planetyp)	...recall the room in the given swap slot to swapin. invalid plane will call topswap; this may not be what you want.
 * roomtyp * roomstackobj__topswap(roomstackobj*)	...recall the top of the stack to swapin.
 * implicit roomstackobj__setswap_ele(roomstackobj*,roomstackele*)	...push the room contained in an element to swap.
 * implicit roomstackobj__makecurrent(roomstackobj*,latlontyp)	...smart swap function. if an element doesn't exist, it is created. if it does, it is moved.
 * roomstackobj__neighbor_query(latlontyp)	...check if a room is in the neighbor register
 * roomstackobj__neighbor_reset()	...set the neighbors register according to the current room
 * roomstackobj__neighbor_clear()
 * roomstackobj__neighbor_pull(uchar)	...copy a pointer from the neighbors register to the swapin register and clear the neighbors register
 * roomstackobj__neighbor_pullset(uchar)	...copy a pointer from the neighbors register to the swapin register and repopulate the neighbors register
 *	note: because of the way the implementation works, duplicate entries are HIGHLY DANGEROUS and must be avoided.
 */

struct roomstackele {
struct roomstackele * prev;
struct roomstackele * next;
roomtyp * room;
}

struct roomstackobj {
roomtyp * swapin;
roomtyp *neighbor[2][6];	//first row are the pointers to the swapped in neighboring rooms. second row is for storing neighbor rooms that are not from the stack and will not be put there.
roomtyp *bank[3][11];
struct roomstackele * top;
struct roomstackele * bottom;
ushort depth;
}

roomstackele * roomstackobj__pushover(roomstackobj * this,roomtyp * room) {
	struct roomstackele * new = malloc(sizeof(struct roomstackele));
	new->room = room;
	new->prev = this->top;
	new->next = NULL;
	this->top->next = new;
	this->top = new;
	this->depth++;
	return new;
}

void roomstackobj__trim(roomstackobj * this) {
while (this->depth > ROOM_STACK_MAX) {
	freeroom(roomstackobj__shift(this));
	}
}

roomstackele * roomstackobj__push(roomstackobj * this,roomtyp * room) {
	roomstackele * tmp = roomstackobj__pushover(this,room);
	roomstackobj__trim(this);
	return tmp;
	}

#define roomstackobj__roompull(X,Y) roomstackobj__pull(X,roomstackobj__roomp(X,Y))

roomstackele * roomstackobj__pull (roomstackobj * this, roomstackele * that) {
	if (!(this->top != that)) {
		that->prev->next = that->next;
		if (that->next == NULL) {
			that->next->prev = that->prev;
			}
		that->prev = NULL;
		that->next = this->top;
		this->top->prev = that;
		this->top = that;
		}
	return that;
	}

roomstackobj__setswap (roomstackobj * this, roomtyp * that) {
	struct planetyp plane = getplanetyp(that->latlon);
	roomstackobj__push(this,roomstackobj__getswap(plane))
	if (plane.rho < 3) {
		if (!(plane.el)) {
			this->bank[plane.rho][plane.az] = that;
			}
		else if (!(plane.az)) {
			switch plane.az :
				case 1 : this->bank[plane.rho][8] = that;break;
				case -1 : this->bank[plane.rho][9] = that;break;
				case -2 : this->bank[plane.rho][10] = that;break;
				default : fprintf(stderr,"struct bitfield overflow\n");raise(SIGSEGV);
			}
		else {
			roomstackobj__push(this,that);
			}
		}
	else {
		roomstackobj__push(this,that);
		}
	this->swapin = that;
return 0;}

#define roomstackobj__setswap_ele(X,Y) roomstackobj__setswap(X,roomstackobj__drop(X,Y))

roomstackobj__makecurrent(roomstackobj * this,latlontyp query) {
	roomtyp * neighborptr = roomstackobj__neighbor_tmpquery(this,query);
	if (neighborptr != NULL) {
		roomstackobj__setswap(this,neighborptr);
		}
	planetyp plane = getplanetyp(query);
	else if (query == roomstackobj__getswap(this,plane)->latlon) {
		roomstackobj__resetswap(this,plane);
		}
	else if (roomstackobj__roompull(this,query) != NULL) {
		roomstackobj__topswap(this);
		}
	else {
		if (roomp(query)) {
			roomstackobj__setswap(this,loadroom(query));
			}
		else {
			roomstackobj__setswap(this,roomgen(query));
			}
		}
	roomstackobj__neighbor_reset();
return 0;}

roomstackobj__scroll(roomstackobj * this,playertyp * you,char dir) {
	switch (dir & 07) :
		case ROOM_EAST : roomstackobj__makecurrent(this,this->swapin->neighborhood.east);you->pos[0] = MAX_X - 1;return 0;
		case ROOM_WEST : roomstackobj__makecurrent(this,this->swapin->neighborhood.west);you->pos[0] = 0;return 0;
		case ROOM_NORTH : roomstackobj__makecurrent(this,this->swapin->neighborhood.north);you->pos[1] = MAX_Y - 1;return 0;
		case ROOM_SOUTH : roomstackobj__makecurrent(this,this->swapin->neighborhood.south);you->pos[1] = 0;return 0;
		case ROOM_UP : roomstackobj__makecurrent(this,this->swapin->neighborhood.up);you->pos[2] = 0;return 0;
		case ROOM_UPSTAIR : roomstackobj__makecurrent(this,this->swapin->neighborhood.up);you->pos[0] = this->swapin->downstair[0];you->pos[1] = this->swapin->downstair[1];you->pos[2] = 0;return 0;
		case ROOM_DOWN : roomstackobj__makecurrent(this,this->swapin->neighborhood.down);you->pos[2] = this->ceiling;return 0;
		case ROOM_DOWNSTAIR : roomstackobj__makecurrent(this,this->swapin->neighborhood.down);you->pos[0] = this->swapin->upstair[0];you->pos[1] = this->swapin->upstair[1];you->pos[2] = this->swapin->ceiling;return 0;
		default : return -1;
	}

roomstackobj__neighbor_reset (struct roomstack * this) {
	for (int n = 0;n < 6;n++) {
		for (int i = 0,i < n,i++) {
			if (this.neighbor[1][i] == this.neighbor[1][n]) {
				this.neighbor[1][n] = NULL;
				}
			}
		if (this.neighbor[1][n] != NULL) {
			freeroom(this.tmpneighbor[n]);
			}
		}
	for (int n = 0;n < 6;n++) {
		this.neighbor[0][n] = NULL;
		this.neighbor[1][n] = NULL;
		}
	struct roomneighbors neighborhood = (*this.swapin)->neighborhood;
#define IFSWITCH(X,Y) if (neighborhood.X) {\
		struct planetyp plane = getplanetyp(neighborhood.latlon[Y]);\
		roomstackele * ele = roomstackobj__roomp(this,neighborhood.latlon[Y]);\
		if (neighborhood.latlon[Y] == roomstackobj__getswap(this,plane).latlon {\
			this.neighbor[0][Y] = roomstackobj__getswap(this,plane);\
			}\
		else if (ele != NULL) {\
			this.neighbor[0][Y] = ele.room;\
			}\
		else {\
			this.neighbor[1][Y] = smrtloadroom(neighborhood.latlon[Y]);\
			this.neighbor[0][Y] = this.neighbor[1][Y];\
			}\
		}
	IFSWITCH(north,ROOM_NORTH);
	IFSWITCH(south,ROOM_SOUTH);
	IFSWITCH(east,ROOM_EAST);
	IFSWITCH(west,ROOM_WEST);
	IFSWITCH(up,ROOM_UP);
	IFSWITCH(down,ROOM_DOWN);
#undef IFSWITCH
	}

/*^DONE^
 * From Rough Pseudocode to Pseudo C
 * TODO
 */

/**PLANESTACK global object**
 * planestackele* PLANESTACK::push(planetyp)
 * uint PLANESTACK::reap()
 * planestackele* PLANESTACK::planep(planetyp)
 * int PLANESTACK::inc(planetyp)
 * int PLANESTACK::dec(planetyp)
 * implicit PLANESTACK::delete(planetyp)
 * int PLANESTACK::inc_ptr(planestackele*)
 * int PLANESTACK::dec_ptr(planestackele*)
 * implicit PLANESTACK::delete_ptr(planestackele*)
 * implicit PLANESTACK::pull(planestackele*)
 * implicit PLANESTACK::makecurrent(planetyp)
 */

struct planestacktyp {
struct planeswaptyp* prev
struct planeswaptyp* next
planetyp key
umint value
}

/**File Operations**
 * implicit saveroom(roomtyp*)
 * roomtyp* loadroom(latlontyp)
 * roomtyp* smrtloadroom(latlontyp)
 * void freeroom(roomtyp*)
 * bool roomp(latlontyp)
 * bool planep(planetyp)
 * implicit loadplane(planetyp)
 * implicit saveplane(planetyp)
 * implicit savegame() __attribute__((cold))
 */

/*implicit*/freeroom(roomptr)
roomtyp* roomptr
{
if (roomptr == NULL) {roomptr = ROOM}
	{
	encontyp* current = roomptr->encon_ptr->prev
	encontyp* previous = roomptr->encon_ptr->prev->prev
	roomptr->encon_ptr->prev->next = NULL
	roomptr->encon_ptr->prev = NULL
	while (previous != NULL) {
		free(current)
		current = previous
		previous = previous->prev
		}
	free(current)
	current = NULL
	}
	{
	setcoord3* current = roomptr->encon_ptr->prev
	setcoord3* previous = roomptr->encon_ptr->prev->prev
	roomptr->encon_ptr->prev->next = NULL
	roomptr->encon_ptr->prev = NULL
	while (previous != NULL) {
		free(current)
		current = previous
		previous = previous->prev
		}
	free(current)
	current = NULL
	}
	{
	enttyp* current = roomptr->encon_ptr->prev
	enttyp* previous = roomptr->encon_ptr->prev->prev
	roomptr->encon_ptr->prev->next = NULL
	roomptr->encon_ptr->prev = NULL
	while (previous != NULL) {
		free(current)
		current = previous
		previous = previous->prev
		}
	free(current)
	current = NULL
	}
	{
	mapobjtyp* current = roomptr->encon_ptr->prev
	mapobjtyp* previous = roomptr->encon_ptr->prev->prev
	roomptr->encon_ptr->prev->next = NULL
	roomptr->encon_ptr->prev = NULL
	while (previous != NULL) {
		free(current)
		current = previous
		previous = previous->prev
		}
	free(current)
	current = NULL
	}
	{
	lightyp* current = roomptr->encon_ptr->prev
	lightyp* previous = roomptr->encon_ptr->prev->prev
	roomptr->encon_ptr->prev->next = NULL
	roomptr->encon_ptr->prev = NULL
	while (previous != NULL) {
		free(current)
		current = previous
		previous = previous->prev
		}
	free(current)
	current = NULL
	}
	return free(roomptr)
}

/*^TODO^
 * From Rough Pseudocode to Pseudo C
 * DONE
 */

roomtyp * smrtloadroom (struct latlontyp query) {
	if (roomp(query)) {
		return loadroom(query);
		}
	else {
		return roomgen(query);
		}
	}

/**getplanetyp**/
struct planetyp getplanetyp(struct latlontyp input) {
	struct planetype output;
	output.rho = input.rho;
	output.az = input.az;
	output.el = input.el;
	return output;
	}

/**shiftstackobj**
 * shiftstackobj__push(racetyp)
 * shiftstackobj__popif()
 * shiftstackobj__pop()
 * shiftstackobj__destroy()
 * shiftstackobj__base_swap()
 * shiftstackobj__alter_set(char,altertimertyp)
 * shiftstackobj__alter_wset(altertimerwtyp)
 * playertyp__shiftstacksync()
 */

shiftstackobj__push (struct shiftstackobj * this,struct racetyp data,uchar timer) {
	if (!(this->topdeck) {
		this->depth++;
		if (depth < 0) {
			this->topdeck = 1;
			this->swap = 0;
			this->lycan = 0;
			this->base[0] = data;
			this->base[1] = (struct racetyp){0,0,0};
			shiftstackobj__destroy(this);
			this->depth = 0;
			return this->depth;
			}
		else if (
		 (this->poly.race == data.race)
		  &&
		 (this->poly.table == data.table)
		  &&
		 (this->poly.meta == data.meta)
			) {
			this->base[this->swap] = data;	
			shiftstackobj__destroy(this);
			this->depth = 0;
			return this->depth;
			}
		else {
			struct shiftstackele * tmp = malloc(sizeof(struct shiftstackele));
			tmp->prev = this->poly;
			tmp->polytimer = timer;
			tmp->race = data.race;
			tmp->table = data.table;
			tmp->meta = data.meta;
			this->poly = tmp;
			return this->depth;
			}
		return -1;
		}
	else {
		this->base[0] = data;
		return 0;
		}
	}

void shiftstackobj__pop (struct shiftstackobj * this) {
	struct shiftstackobj * deadbeef = this->poly;
	if ((this->poly != NULL) && (this->poly->prev != NULL)) {
		this->poly = this->poly->prev;
		free(deadbeef);
		}
	}

/**blit functions**/

dialouge(coord3 * pos,coord3 * meta,struct strarry * lines,struct chgat_args_typ * attrs,struct attrcolortyp default)

spriteblit(coord3 * pos,coord2 * meta,struct strarry * lines,struct chgat_args_typ * attrs,struct attrcolortyp default,ucoord3 origin)


